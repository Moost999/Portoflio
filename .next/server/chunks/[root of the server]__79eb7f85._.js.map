{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/pc/Desktop/portfolioNovo/Portoflio/src/app/api/projects/route.ts"],"sourcesContent":["// app/api/projects/route.ts\r\nimport { NextResponse } from 'next/server';\r\n\r\nconst SPRING_API_URL = 'https://backendportfolio-wwbi.onrender.com/api';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const response = await fetch(`${SPRING_API_URL}/projects`, {\r\n      cache: 'no-store' // Para evitar cache em desenvolvimento\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Spring API error: ${response.statusText}`);\r\n    }\r\n\r\n    const projects = await response.json();\r\n    console.log(projects)\r\n    return NextResponse.json(projects);\r\n  } catch (error) {\r\n    console.error('Error fetching projects:', error);\r\n    return NextResponse.json(\r\n      { error: error instanceof Error ? error.message : 'Failed to fetch projects' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const projectData = await request.json();\r\n\r\n    const response = await fetch(`${SPRING_API_URL}/projects`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // Adicione o token JWT aqui quando implementar autenticação\r\n        // 'Authorization': `Bearer ${token}`\r\n      },\r\n      body: JSON.stringify(projectData),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Spring API error: ${response.statusText}`);\r\n    }\r\n\r\n    const newProject = await response.json();\r\n    return NextResponse.json(newProject, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error creating project:', error);\r\n    return NextResponse.json(\r\n      { error: error instanceof Error ? error.message : 'Failed to create project' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAC5B;;AAEA,MAAM,iBAAiB;AAEhB,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,SAAS,CAAC,EAAE;YACzD,OAAO,WAAW,uCAAuC;QAC3D;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,UAAU,EAAE;QAC5D;QAEA,MAAM,WAAW,MAAM,SAAS,IAAI;QACpC,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAA2B,GAC7E;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,cAAc,MAAM,QAAQ,IAAI;QAEtC,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,SAAS,CAAC,EAAE;YACzD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAGlB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS,UAAU,EAAE;QAC5D;QAEA,MAAM,aAAa,MAAM,SAAS,IAAI;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAA2B,GAC7E;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}